import { c as create_ssr_component, a as escape, b as add_attribute, v as validate_component, e as each } from "../../../../../chunks/ssr.js";
import "devalue";
import "../../../../../chunks/client.js";
const InfoCardwIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { title } = $$props;
  let { text } = $$props;
  let { path } = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.text === void 0 && $$bindings.text && text !== void 0)
    $$bindings.text(text);
  if ($$props.path === void 0 && $$bindings.path && path !== void 0)
    $$bindings.path(path);
  return `<div class="${["flex flex-row items-center gap-2 w-fit ", !text ? "hidden" : ""].join(" ").trim()}"><img src="${"../../" + escape(path, true)}" alt="icon" class="bg-gradient-to-br from-black from-10% to-purple-950/80 w-12 p-2"> <div class="flex flex-col justify-center"><p class="text-gray-500 text-xs break-normal">${escape(title)}</p> <p class="text-lg">${escape(text)}</p></div></div>`;
});
const css = {
  code: "dialog[open].svelte-olach8{animation:svelte-olach8-zoom 0.3s cubic-bezier(0.34, 1.56, 0.64, 1)}@keyframes svelte-olach8-zoom{from{transform:scale(0.95)}to{transform:scale(1)}}dialog[open].svelte-olach8::backdrop{animation:svelte-olach8-fade 0.2s ease-out}@keyframes svelte-olach8-fade{from{opacity:0}to{opacity:1}}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nimport InfoCardwIcon from \\"./components/InfoCardwIcon.svelte\\";\\nimport { enhance } from \\"$app/forms\\";\\nimport { fade } from \\"svelte/transition\\";\\nimport { goto } from \\"$app/navigation\\";\\nexport let data;\\nexport let form;\\nlet set = data.set;\\nlet currentInstructions = [];\\nlet instructiosPref = \\"\\";\\nlet deletingSet = false;\\nlet editingSet = false;\\nlet descriptionEdit = \\"\\";\\nlet yearBoughtEdit = \\"\\";\\nlet priceEdit = \\"\\";\\nlet modalDelete;\\nlet modalEdit;\\nlet currencies = [\\"czk.svg\\", \\"euro.svg\\", \\"usd.svg\\", \\"gbp.svg\\"];\\nlet loading = false;\\nlet updateStatus = \\"\\";\\n$:\\n  console.log(data);\\nonMount(() => {\\n  if (set) {\\n    currentInstructions = set.myInstructions;\\n    instructiosPref = \\"Your\\";\\n  }\\n});\\nfunction editSet() {\\n  editingSet = true;\\n  descriptionEdit = set?.description;\\n  yearBoughtEdit = set?.yearBought;\\n  priceEdit = set?.price;\\n}\\nasync function deleteSet() {\\n  const request = await fetch(\\"/api/deleteSet\\", {\\n    method: \\"POST\\",\\n    body: JSON.stringify({\\n      id: data.slug\\n    })\\n  });\\n  updateStatus = await request;\\n  if (request.ok) {\\n    setTimeout(() => {\\n      deletingSet = false;\\n      goto(\\"/\\");\\n    }, 1500);\\n  }\\n}\\n$:\\n  if (modalDelete && deletingSet && !editingSet)\\n    modalDelete.showModal();\\n$:\\n  if (modalEdit && editingSet && !deletingSet)\\n    modalEdit.showModal();\\nfunction handleSubmit() {\\n  loading = true;\\n}\\n<\/script>\\r\\n\\r\\n<!-- svelte-ignore a11y-click-events-have-key-events a11y-no-noninteractive-element-interactions -->\\r\\n<dialog\\r\\n    class=\\"border-3 border-zinc-600 bg-black\\r\\n        text-zinc-300 backdrop:bg-black/40 backdrop:backdrop-blur-sm w-[80%] md:w-[60%] lg:w-[45%] xl:w-[35%]\\"\\r\\n    bind:this={modalDelete}\\r\\n    on:close={() => (deletingSet = false)}\\r\\n    on:click|self={() => modalDelete.close()}\\r\\n>\\r\\n    <!-- svelte-ignore a11y-no-static-element-interactions -->\\r\\n    <div on:click|stopPropagation>\\r\\n        <!-- <slot name=\\"header\\" /> -->\\r\\n        <div class=\\"border-b-3 border-zinc-600 p-2 pb-8 text-white\\">\\r\\n            <p class=\\"mb-1\\">Delete:</p>\\r\\n            <p class=\\"uppercase italic text-xl\\">{set.name}</p>\\r\\n            {#if updateStatus.status === 200}\\r\\n                <p\\r\\n                    transition:fade={{ duration: 200 }}\\r\\n                    class=\\"pt-2 text-green-600\\"\\r\\n                >\\r\\n                    Successfully deleted\\r\\n                </p>\\r\\n            {:else if updateStatus.status !== 200 && updateStatus.status}\\r\\n                <p\\r\\n                    transition:fade={{ duration: 200 }}\\r\\n                    class=\\"pt-2 text-red-600\\"\\r\\n                >\\r\\n                    Error deleting set <br />\\r\\n                    <span class=\\"italic\\">→ {updateStatus.message}</span>\\r\\n                </p>\\r\\n            {/if}\\r\\n        </div>\\r\\n        <div class=\\"p-2 text-lg\\">\\r\\n            <p>\\r\\n                &bull; Set will only be deleted from your account. <br />\\r\\n                &bull; Sets already added by others will not be deleted. <br />\\r\\n                &bull; This action is irreversible.\\r\\n            </p>\\r\\n        </div>\\r\\n\\r\\n        <!-- svelte-ignore a11y-autofocus -->\\r\\n        <div class=\\"flex flex-row justify-evenly mt-12 border-main\\">\\r\\n            <button\\r\\n                on:click={deleteSet}\\r\\n                class=\\"w-full py-2 font-bold text-red-600 hover:text-black hover:bg-red-600 transition-all border-r-[1.5px] border-zinc-600\\"\\r\\n                >I am sure</button\\r\\n            >\\r\\n            <button\\r\\n                class=\\"w-full py-2 text-zinc-100 hover:text-black hover:bg-zinc-300 transition-all p-2 px-4 border-l-[1.5px] border-zinc-600\\"\\r\\n                on:click={() => modalDelete.close()}>Go back</button\\r\\n            >\\r\\n        </div>\\r\\n    </div>\\r\\n</dialog>\\r\\n\\r\\n<!-- svelte-ignore a11y-click-events-have-key-events a11y-no-noninteractive-element-interactions -->\\r\\n<dialog\\r\\n    class=\\"border-3 border-zinc-600 bg-black\\r\\n     text-zinc-300 backdrop:bg-black/40 backdrop:backdrop-blur-sm w-[80%] md:w-[60%] lg:w-[50%] xl:w-[40%]\\"\\r\\n    bind:this={modalEdit}\\r\\n    on:close={() => (editingSet = false)}\\r\\n    on:click|self={() => modalEdit.close()}\\r\\n>\\r\\n    <!-- svelte-ignore a11y-no-static-element-interactions -->\\r\\n    <div on:click|stopPropagation>\\r\\n        <div class=\\"border-b-3 border-zinc-600 p-2 pb-8 text-white\\">\\r\\n            <p class=\\"mb-1\\">Editing:</p>\\r\\n            <p class=\\"uppercase italic text-xl\\">{set.name}</p>\\r\\n            {#if updateStatus.status === 200}\\r\\n                <p\\r\\n                    transition:fade={{ duration: 200 }}\\r\\n                    class=\\"pt-2 text-green-600\\"\\r\\n                >\\r\\n                    Successfully updated\\r\\n                </p>\\r\\n            {:else if updateStatus.status !== 200 && updateStatus.status}\\r\\n                <p\\r\\n                    transition:fade={{ duration: 200 }}\\r\\n                    class=\\"pt-2 text-red-600\\"\\r\\n                >\\r\\n                    Error deleting set <br />\\r\\n                    <span class=\\"italic\\">→ {updateStatus.message}</span>\\r\\n                </p>\\r\\n            {/if}\\r\\n        </div>\\r\\n        <form\\r\\n            method=\\"POST\\"\\r\\n            action=\\"?/updateSet\\"\\r\\n            on:submit|preventDefault={handleSubmit}\\r\\n            use:enhance={() => {\\r\\n                return async ({ result }) => {\\r\\n                    if (result) {\\r\\n                        updateStatus = result;\\r\\n                        setTimeout(() => {\\r\\n                            editingSet = false;\\r\\n                            loading = false;\\r\\n\\r\\n                            window.location.reload();\\r\\n                        }, 1000);\\r\\n                    }\\r\\n                };\\r\\n            }}\\r\\n        >\\r\\n            <input\\r\\n                type=\\"text\\"\\r\\n                class=\\"hidden w-0 h-0\\"\\r\\n                name=\\"setId\\"\\r\\n                bind:value={set.id}\\r\\n            />\\r\\n\\r\\n            <div class=\\"flex flex-col gap-6 p-2\\">\\r\\n                <div class=\\"flex flex-col\\">\\r\\n                    <textarea\\r\\n                        name=\\"descriptionEdit\\"\\r\\n                        id=\\"descriptionEdit\\"\\r\\n                        bind:value={descriptionEdit}\\r\\n                        autocomplete=\\"off\\"\\r\\n                        rows=\\"4\\"\\r\\n                        maxlength=\\"256\\"\\r\\n                        placeholder=\\"Very secret description...\\"\\r\\n                        class=\\"my-input resize-none peer\\"\\r\\n                    ></textarea>\\r\\n                    <label\\r\\n                        class=\\"text-gray-400 peer-focus:text-white -order-last transition-all duration-200 mb-1\\"\\r\\n                        for=\\"descriptionEdit\\">New description</label\\r\\n                    >\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"flex flex-col\\">\\r\\n                    <input\\r\\n                        type=\\"text\\"\\r\\n                        name=\\"yearBoughtEdit\\"\\r\\n                        id=\\"yearBoughtEdit\\"\\r\\n                        bind:value={yearBoughtEdit}\\r\\n                        autocomplete=\\"off\\"\\r\\n                        maxlength=\\"4\\"\\r\\n                        placeholder=\\"2019\\"\\r\\n                        class=\\"my-input peer\\"\\r\\n                    />\\r\\n                    <label\\r\\n                        class=\\"text-gray-400 peer-focus:text-white -order-last transition-all duration-200 mb-1\\"\\r\\n                        for=\\"yearBoughtEdit\\">New year of purchase</label\\r\\n                    >\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"flex flex-col\\">\\r\\n                    <input\\r\\n                        type=\\"text\\"\\r\\n                        name=\\"priceEdit\\"\\r\\n                        id=\\"priceEdit\\"\\r\\n                        bind:value={priceEdit}\\r\\n                        autocomplete=\\"off\\"\\r\\n                        maxlength=\\"30\\"\\r\\n                        placeholder=\\"199\\"\\r\\n                        class=\\"my-input peer\\"\\r\\n                    />\\r\\n                    <label\\r\\n                        class=\\"text-gray-400 peer-focus:text-white -order-last transition-all duration-200 mb-1\\"\\r\\n                        for=\\"priceEdit\\">New price</label\\r\\n                    >\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\"flex flex-row justify-evenly mt-12 border-main\\">\\r\\n                <button\\r\\n                    type=\\"submit\\"\\r\\n                    disabled={loading}\\r\\n                    class=\\"w-full py-2 font-bold text-green-600 hover:text-black hover:bg-green-600 transition-all border-r-[1.5px] border-zinc-600 disabled:text-gray-400 disabled:cursor-not-allowed disabled:hover:bg-transparent\\"\\r\\n                    >Update\\r\\n                </button>\\r\\n                <button\\r\\n                    class=\\"w-full py-2 text-zinc-100 hover:text-black hover:bg-zinc-300 transition-all p-2 px-4 border-l-[1.5px] border-zinc-600 disabled:text-gray-400 disabled:cursor-not-allowed disabled:hover:bg-transparent\\"\\r\\n                    on:click={() => modalEdit.close()}\\r\\n                    disabled={loading}\\r\\n                    >Go back\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n        <!-- svelte-ignore a11y-autofocus -->\\r\\n    </div>\\r\\n</dialog>\\r\\n\\r\\n<section in:fade={{ delay: 50, duration: 300 }}>\\r\\n    <div class=\\"flex\\">\\r\\n        <div\\r\\n            class=\\"border-b-3 md:border-r-3 w-full lg:w-3/5 border-zinc-600 flex flex-col justify-between\\"\\r\\n        >\\r\\n            <div class=\\"px-4 py-8\\">\\r\\n                <h1\\r\\n                    class=\\"font-bold uppercase text-3xl md:text-4xl lg:text-5xl\\"\\r\\n                >\\r\\n                    {set.name}\\r\\n                </h1>\\r\\n                <p class=\\"font-normal mt-20\\">\\r\\n                    {#if set.description}\\r\\n                        {set.description}\\r\\n                    {:else}\\r\\n                        <span class=\\"italic text-gray-400\\">No description</span>\\r\\n                    {/if}\\r\\n                </p>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\"lg:w-[40%] max-md:hidden h-fit border-b-3 border-zinc-600\\">\\r\\n            <!-- cdn.lego-manager.fun pro cloudflare - možná nastavit env ale clientside code -->\\r\\n            <img\\r\\n                src=\\"http://localhost:3000/api/v1/image/{set?.image}\\"\\r\\n                alt=\\"\\"\\r\\n                class=\\"h-[480px] object-cover\\"\\r\\n            />\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\"w-full border-b-3 border-zinc-600\\">\\r\\n        <div\\r\\n            class=\\"border-zinc-600 md:border-r-3 md:border-l-3 md:w-fit mx-auto flex max-md:grid grid-cols-2 rows-auto md:justify-center flex-wrap md:gap-x-14 gap-6 md:gap-y-7 p-4\\"\\r\\n        >\\r\\n            <InfoCardwIcon\\r\\n                path=\\"set/number-icon.svg\\"\\r\\n                text={set.setNumber}\\r\\n                title=\\"Set number\\"\\r\\n            ></InfoCardwIcon>\\r\\n            <InfoCardwIcon\\r\\n                path=\\"set/collection-icon.svg\\"\\r\\n                text={set.themeName}\\r\\n                title=\\"Theme/Collection\\"\\r\\n            ></InfoCardwIcon>\\r\\n            <InfoCardwIcon\\r\\n                path=\\"set/bricks-icon.svg\\"\\r\\n                text={set.partsAmount}\\r\\n                title=\\"No. of bricks\\"\\r\\n            ></InfoCardwIcon>\\r\\n            <InfoCardwIcon\\r\\n                path=\\"currencies/{currencies[data.set.currency]}\\"\\r\\n                text={set.price}\\r\\n                title=\\"Price\\"\\r\\n            ></InfoCardwIcon>\\r\\n            <InfoCardwIcon\\r\\n                path=\\"set/year-released-icon.svg\\"\\r\\n                text={set.yearReleased}\\r\\n                title=\\"Year released\\"\\r\\n            ></InfoCardwIcon>\\r\\n            <InfoCardwIcon\\r\\n                path=\\"set/year-bought-icon.svg\\"\\r\\n                text={set.yearBought}\\r\\n                title=\\"Year bought\\"\\r\\n            ></InfoCardwIcon>\\r\\n            <InfoCardwIcon\\r\\n                path=\\"set/added.svg\\"\\r\\n                text={new Date(set.addedOn).toLocaleDateString(\\"de-DE\\")}\\r\\n                title=\\"Added on\\"\\r\\n            ></InfoCardwIcon>\\r\\n            <InfoCardwIcon\\r\\n                path=\\"set/last-modified.svg\\"\\r\\n                text={new Date(set.lastModified).toLocaleDateString(\\"de-DE\\")}\\r\\n                title=\\"Last modified\\"\\r\\n            ></InfoCardwIcon>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\"flex flex-col md:flex-row max-md:w-full\\">\\r\\n        {#if set.allInstructions.length > 0 || set.myInstructions.length > 0}\\r\\n            <div\\r\\n                class=\\"lg:w-1/2 md:border-r-3 border-zinc-600 max-md:border-b-3\\"\\r\\n                class:border-b-3={currentInstructions == 0}\\r\\n            >\\r\\n                <div class=\\"px-4 py-4 mb-4\\">\\r\\n                    <h2 class=\\"text-3xl font-bold mb-8 md:mb-12\\">\\r\\n                        Available instructions:\\r\\n                    </h2>\\r\\n                    <div class=\\"flex flex-col md:flex-row gap-4\\">\\r\\n                        <button\\r\\n                            on:click={() =>\\r\\n                                (currentInstructions = set.myInstructions)}\\r\\n                            on:click={() => (instructiosPref = \\"Your\\")}\\r\\n                            class:!border-purple-600={instructiosPref == \\"Your\\"}\\r\\n                            class:!text-purple-500={instructiosPref == \\"Your\\"}\\r\\n                            class=\\"my-button\\"\\r\\n                            >Your instructions ({set.myInstructions\\r\\n                                .length})</button\\r\\n                        >\\r\\n                        <button\\r\\n                            on:click={() =>\\r\\n                                (currentInstructions = set.allInstructions)}\\r\\n                            on:click={() => (instructiosPref = \\"Public\\")}\\r\\n                            class:!border-purple-600={instructiosPref ==\\r\\n                                \\"Public\\"}\\r\\n                            class:!text-purple-500={instructiosPref == \\"Public\\"}\\r\\n                            class=\\"my-button\\"\\r\\n                            >Public instructions ({set.allInstructions\\r\\n                                .length})</button\\r\\n                        >\\r\\n                    </div>\\r\\n                </div>\\r\\n                {#each currentInstructions as instruction, i}\\r\\n                    <div class=\\"flex flex-row items-center border-main\\">\\r\\n                        <p\\r\\n                            class=\\"text-2xl font-bold border-r-3 border-zinc-600 h-full p-4 w-12\\"\\r\\n                        >\\r\\n                            {i + 1}\\r\\n                        </p>\\r\\n                        <div class=\\"ml-4 flex max-md:flex-wrap gap-4\\">\\r\\n                            <a\\r\\n                                class=\\"my-button-2 shadow-none px-5\\"\\r\\n                                href=\\"http://localhost:3000/api/v1/instructions/{instruction.instructions}\\"\\r\\n                                target=\\"_blank\\"\\r\\n                                ><span\\r\\n                                    class=\\"relative z-10 flex flex-row items-center gap-4\\"\\r\\n                                >\\r\\n                                    <img\\r\\n                                        src=\\"/set/open.svg\\"\\r\\n                                        alt=\\"open icon\\"\\r\\n                                        class=\\"w-5 h-5\\"\\r\\n                                    />Open</span\\r\\n                                ></a\\r\\n                            ><a\\r\\n                                class=\\"my-button-2 shadow-none px-5\\"\\r\\n                                href=\\"http://localhost:3000/api/v1/instructions/download/{instruction.instructions}\\"\\r\\n                                target=\\"_self\\"\\r\\n                                download\\r\\n                                ><span\\r\\n                                    class=\\"relative z-10 flex flex-row items-center gap-4\\"\\r\\n                                >\\r\\n                                    <img\\r\\n                                        src=\\"/set/download.svg\\"\\r\\n                                        alt=\\"open icon\\"\\r\\n                                        class=\\"w-5 h-5\\"\\r\\n                                    />Download</span\\r\\n                                ></a\\r\\n                            >\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div\\r\\n                        class=\\"flex flex-col max-md:border-main border-gray-600 md:last:border-b-3\\"\\r\\n                    >\\r\\n                        {#if currentInstructions.length == 1}\\r\\n                            <object\\r\\n                                title=\\"instructions\\"\\r\\n                                class=\\"h-screen max-md:mx-6\\"\\r\\n                                data=\\"http://localhost:3000/api/v1/instructions/{currentInstructions[0]\\r\\n                                    .instructions}\\"\\r\\n                                type=\\"application/pdf\\"\\r\\n                            ></object>\\r\\n                        {/if}\\r\\n                    </div>\\r\\n                {/each}\\r\\n            </div>\\r\\n        {/if}\\r\\n        <div class=\\"px-8 md:hidden h-fit border-b-3 border-zinc-600\\">\\r\\n            <img\\r\\n                src=\\"http://localhost:3000/api/v1/image/{set?.image}\\"\\r\\n                alt=\\"\\"\\r\\n                class=\\"w-11/12 mx-auto object-cover\\"\\r\\n            />\\r\\n        </div>\\r\\n        <div>\\r\\n            <div\\r\\n                class=\\"flex flex-row gap-4 p-4 max-md:justify-center max-md:my-4\\"\\r\\n            >\\r\\n                <button on:click={editSet} class=\\"my-button-2\\">\\r\\n                    <span class=\\"relative z-10\\">Edit set</span>\\r\\n                </button>\\r\\n                <button\\r\\n                    on:click={() => (deletingSet = !deletingSet)}\\r\\n                    class=\\"my-button-2\\"\\r\\n                >\\r\\n                    <span class=\\"relative z-10\\">Delete set</span>\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</section>\\r\\n\\r\\n<style>\\r\\n    dialog[open] {\\r\\n        animation: zoom 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\\r\\n    }\\r\\n    @keyframes zoom {\\r\\n        from {\\r\\n            transform: scale(0.95);\\r\\n        }\\r\\n        to {\\r\\n            transform: scale(1);\\r\\n        }\\r\\n    }\\r\\n    dialog[open]::backdrop {\\r\\n        animation: fade 0.2s ease-out;\\r\\n    }\\r\\n    @keyframes fade {\\r\\n        from {\\r\\n            opacity: 0;\\r\\n        }\\r\\n        to {\\r\\n            opacity: 1;\\r\\n        }\\r\\n    }\\r\\n</style>\\r\\n"],"names":[],"mappings":"AA+aI,MAAM,CAAC,IAAI,eAAE,CACT,SAAS,CAAE,kBAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CACzD,CACA,WAAW,kBAAK,CACZ,IAAK,CACD,SAAS,CAAE,MAAM,IAAI,CACzB,CACA,EAAG,CACC,SAAS,CAAE,MAAM,CAAC,CACtB,CACJ,CACA,MAAM,CAAC,IAAI,eAAC,UAAW,CACnB,SAAS,CAAE,kBAAI,CAAC,IAAI,CAAC,QACzB,CACA,WAAW,kBAAK,CACZ,IAAK,CACD,OAAO,CAAE,CACb,CACA,EAAG,CACC,OAAO,CAAE,CACb,CACJ"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { data } = $$props;
  let { form } = $$props;
  let set = data.set;
  let currentInstructions = [];
  let yearBoughtEdit = "";
  let priceEdit = "";
  let modalDelete;
  let modalEdit;
  let currencies = ["czk.svg", "euro.svg", "usd.svg", "gbp.svg"];
  let updateStatus = "";
  if ($$props.data === void 0 && $$bindings.data && data !== void 0)
    $$bindings.data(data);
  if ($$props.form === void 0 && $$bindings.form && form !== void 0)
    $$bindings.form(form);
  $$result.css.add(css);
  {
    console.log(data);
  }
  return ` <dialog class="border-3 border-zinc-600 bg-black text-zinc-300 backdrop:bg-black/40 backdrop:backdrop-blur-sm w-[80%] md:w-[60%] lg:w-[45%] xl:w-[35%] svelte-olach8"${add_attribute("this", modalDelete, 0)}> <div> <div class="border-b-3 border-zinc-600 p-2 pb-8 text-white"><p class="mb-1" data-svelte-h="svelte-1qb0b59">Delete:</p> <p class="uppercase italic text-xl">${escape(set.name)}</p> ${updateStatus.status === 200 ? `<p class="pt-2 text-green-600" data-svelte-h="svelte-1o0o3jm">Successfully deleted</p>` : `${updateStatus.status !== 200 && updateStatus.status ? `<p class="pt-2 text-red-600">Error deleting set <br> <span class="italic">→ ${escape(updateStatus.message)}</span></p>` : ``}`}</div> <div class="p-2 text-lg" data-svelte-h="svelte-15pd76y"><p>• Set will only be deleted from your account. <br>
                • Sets already added by others will not be deleted. <br>
                • This action is irreversible.</p></div>  <div class="flex flex-row justify-evenly mt-12 border-main"><button class="w-full py-2 font-bold text-red-600 hover:text-black hover:bg-red-600 transition-all border-r-[1.5px] border-zinc-600" data-svelte-h="svelte-102yj7e">I am sure</button> <button class="w-full py-2 text-zinc-100 hover:text-black hover:bg-zinc-300 transition-all p-2 px-4 border-l-[1.5px] border-zinc-600" data-svelte-h="svelte-1endady">Go back</button></div></div></dialog>  <dialog class="border-3 border-zinc-600 bg-black text-zinc-300 backdrop:bg-black/40 backdrop:backdrop-blur-sm w-[80%] md:w-[60%] lg:w-[50%] xl:w-[40%] svelte-olach8"${add_attribute("this", modalEdit, 0)}> <div><div class="border-b-3 border-zinc-600 p-2 pb-8 text-white"><p class="mb-1" data-svelte-h="svelte-1bgsxs2">Editing:</p> <p class="uppercase italic text-xl">${escape(set.name)}</p> ${updateStatus.status === 200 ? `<p class="pt-2 text-green-600" data-svelte-h="svelte-51srmo">Successfully updated</p>` : `${updateStatus.status !== 200 && updateStatus.status ? `<p class="pt-2 text-red-600">Error deleting set <br> <span class="italic">→ ${escape(updateStatus.message)}</span></p>` : ``}`}</div> <form method="POST" action="?/updateSet"><input type="text" class="hidden w-0 h-0" name="setId"${add_attribute("value", set.id, 0)}> <div class="flex flex-col gap-6 p-2"><div class="flex flex-col"><textarea name="descriptionEdit" id="descriptionEdit" autocomplete="off" rows="4" maxlength="256" placeholder="Very secret description..." class="my-input resize-none peer">${escape("")}</textarea> <label class="text-gray-400 peer-focus:text-white -order-last transition-all duration-200 mb-1" for="descriptionEdit" data-svelte-h="svelte-qioe06">New description</label></div> <div class="flex flex-col"><input type="text" name="yearBoughtEdit" id="yearBoughtEdit" autocomplete="off" maxlength="4" placeholder="2019" class="my-input peer"${add_attribute("value", yearBoughtEdit, 0)}> <label class="text-gray-400 peer-focus:text-white -order-last transition-all duration-200 mb-1" for="yearBoughtEdit" data-svelte-h="svelte-15lvihr">New year of purchase</label></div> <div class="flex flex-col"><input type="text" name="priceEdit" id="priceEdit" autocomplete="off" maxlength="30" placeholder="199" class="my-input peer"${add_attribute("value", priceEdit, 0)}> <label class="text-gray-400 peer-focus:text-white -order-last transition-all duration-200 mb-1" for="priceEdit" data-svelte-h="svelte-nkwtg8">New price</label></div></div> <div class="flex flex-row justify-evenly mt-12 border-main"><button type="submit" ${""} class="w-full py-2 font-bold text-green-600 hover:text-black hover:bg-green-600 transition-all border-r-[1.5px] border-zinc-600 disabled:text-gray-400 disabled:cursor-not-allowed disabled:hover:bg-transparent">Update</button> <button class="w-full py-2 text-zinc-100 hover:text-black hover:bg-zinc-300 transition-all p-2 px-4 border-l-[1.5px] border-zinc-600 disabled:text-gray-400 disabled:cursor-not-allowed disabled:hover:bg-transparent" ${""}>Go back</button></div></form> </div></dialog> <section><div class="flex"><div class="border-b-3 md:border-r-3 w-full lg:w-3/5 border-zinc-600 flex flex-col justify-between"><div class="px-4 py-8"><h1 class="font-bold uppercase text-3xl md:text-4xl lg:text-5xl">${escape(set.name)}</h1> <p class="font-normal mt-20">${set.description ? `${escape(set.description)}` : `<span class="italic text-gray-400" data-svelte-h="svelte-12of3eq">No description</span>`}</p></div></div> <div class="lg:w-[40%] max-md:hidden h-fit border-b-3 border-zinc-600"> <img src="${"http://localhost:3000/api/v1/image/" + escape(set?.image, true)}" alt="" class="h-[480px] object-cover"></div></div> <div class="w-full border-b-3 border-zinc-600"><div class="border-zinc-600 md:border-r-3 md:border-l-3 md:w-fit mx-auto flex max-md:grid grid-cols-2 rows-auto md:justify-center flex-wrap md:gap-x-14 gap-6 md:gap-y-7 p-4">${validate_component(InfoCardwIcon, "InfoCardwIcon").$$render(
    $$result,
    {
      path: "set/number-icon.svg",
      text: set.setNumber,
      title: "Set number"
    },
    {},
    {}
  )} ${validate_component(InfoCardwIcon, "InfoCardwIcon").$$render(
    $$result,
    {
      path: "set/collection-icon.svg",
      text: set.themeName,
      title: "Theme/Collection"
    },
    {},
    {}
  )} ${validate_component(InfoCardwIcon, "InfoCardwIcon").$$render(
    $$result,
    {
      path: "set/bricks-icon.svg",
      text: set.partsAmount,
      title: "No. of bricks"
    },
    {},
    {}
  )} ${validate_component(InfoCardwIcon, "InfoCardwIcon").$$render(
    $$result,
    {
      path: "currencies/" + currencies[data.set.currency],
      text: set.price,
      title: "Price"
    },
    {},
    {}
  )} ${validate_component(InfoCardwIcon, "InfoCardwIcon").$$render(
    $$result,
    {
      path: "set/year-released-icon.svg",
      text: set.yearReleased,
      title: "Year released"
    },
    {},
    {}
  )} ${validate_component(InfoCardwIcon, "InfoCardwIcon").$$render(
    $$result,
    {
      path: "set/year-bought-icon.svg",
      text: set.yearBought,
      title: "Year bought"
    },
    {},
    {}
  )} ${validate_component(InfoCardwIcon, "InfoCardwIcon").$$render(
    $$result,
    {
      path: "set/added.svg",
      text: new Date(set.addedOn).toLocaleDateString("de-DE"),
      title: "Added on"
    },
    {},
    {}
  )} ${validate_component(InfoCardwIcon, "InfoCardwIcon").$$render(
    $$result,
    {
      path: "set/last-modified.svg",
      text: new Date(set.lastModified).toLocaleDateString("de-DE"),
      title: "Last modified"
    },
    {},
    {}
  )}</div></div> <div class="flex flex-col md:flex-row max-md:w-full">${set.allInstructions.length > 0 || set.myInstructions.length > 0 ? `<div class="${[
    "lg:w-1/2 md:border-r-3 border-zinc-600 max-md:border-b-3",
    currentInstructions == 0 ? "border-b-3" : ""
  ].join(" ").trim()}"><div class="px-4 py-4 mb-4"><h2 class="text-3xl font-bold mb-8 md:mb-12" data-svelte-h="svelte-141w6rn">Available instructions:</h2> <div class="flex flex-col md:flex-row gap-4"><button class="${[
    "my-button",
    " "
  ].join(" ").trim()}">Your instructions (${escape(set.myInstructions.length)})</button> <button class="${[
    "my-button",
    " "
  ].join(" ").trim()}">Public instructions (${escape(set.allInstructions.length)})</button></div></div> ${each(currentInstructions, (instruction, i) => {
    return `<div class="flex flex-row items-center border-main"><p class="text-2xl font-bold border-r-3 border-zinc-600 h-full p-4 w-12">${escape(i + 1)}</p> <div class="ml-4 flex max-md:flex-wrap gap-4"><a class="my-button-2 shadow-none px-5" href="${"http://localhost:3000/api/v1/instructions/" + escape(instruction.instructions, true)}" target="_blank"><span class="relative z-10 flex flex-row items-center gap-4" data-svelte-h="svelte-vaid5h"><img src="/set/open.svg" alt="open icon" class="w-5 h-5">Open</span></a><a class="my-button-2 shadow-none px-5" href="${"http://localhost:3000/api/v1/instructions/download/" + escape(instruction.instructions, true)}" target="_self" download><span class="relative z-10 flex flex-row items-center gap-4" data-svelte-h="svelte-1yypsfp"><img src="/set/download.svg" alt="open icon" class="w-5 h-5">Download</span></a> </div></div> <div class="flex flex-col max-md:border-main border-gray-600 md:last:border-b-3">${currentInstructions.length == 1 ? `<object title="instructions" class="h-screen max-md:mx-6" data="${"http://localhost:3000/api/v1/instructions/" + escape(currentInstructions[0].instructions, true)}" type="application/pdf"></object>` : ``} </div>`;
  })}</div>` : ``} <div class="px-8 md:hidden h-fit border-b-3 border-zinc-600"><img src="${"http://localhost:3000/api/v1/image/" + escape(set?.image, true)}" alt="" class="w-11/12 mx-auto object-cover"></div> <div><div class="flex flex-row gap-4 p-4 max-md:justify-center max-md:my-4"><button class="my-button-2" data-svelte-h="svelte-vivdd3"><span class="relative z-10">Edit set</span></button> <button class="my-button-2" data-svelte-h="svelte-i77qof"><span class="relative z-10">Delete set</span></button></div></div></div> </section>`;
});
export {
  Page as default
};
